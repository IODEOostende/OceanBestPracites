AWSTemplateFormatVersion: '2010-09-09'
Description: Describes the resources for the OBP Search API.
Parameters:
  ElasticSearchHost:
    Description: The Elastic Search host (without protocol) to use for indexing.
    Type: String
  Environment:
    Default: staging
    Description: staging, prod, or a development environment uniquely named across
      CF templates like stark
    Type: String
  OntologyStoreHost:
    Description: The host (without protocol) of the triple store containing ontology
      terms.
    Type: String
  OntologyStorePort:
    Default: 8890
    Description: The port associated with the ontology triple store host.
    Type: Number
Resources:
  DocumentPreview:
    Properties:
      CodeUri: s3://obp-search-api-functions-iode/d01ada3c1d2d167a67fc21c30d600f8f
      Description: Returns the result of running our Ontology term tagging routine
        against the given document body and title.
      Environment:
        Variables:
          ELASTIC_SEARCH_HOST:
            Ref: ElasticSearchHost
      Events:
        DocumentPreview:
          Properties:
            Method: POST
            Path: /documents/preview
            RestApiId:
              Ref: SearchApi
          Type: Api
      FunctionName:
        Fn::Sub: obp-document-preview-function-${Environment}
      Handler: preview.handler
      Runtime: nodejs12.x
      Timeout: 100
    Type: AWS::Serverless::Function
  GetStatistics:
    Properties:
      CodeUri: s3://obp-search-api-functions-iode/d01ada3c1d2d167a67fc21c30d600f8f
      Description: Returns general statistics about the OBP index size and ontology
        count.
      Environment:
        Variables:
          ELASTIC_SEARCH_HOST:
            Ref: ElasticSearchHost
          ONTOLOGY_STORE_HOST:
            Ref: OntologyStoreHost
          ONTOLOGY_STORE_PORT:
            Ref: OntologyStorePort
      Events:
        GetStatistics:
          Properties:
            Method: GET
            Path: /statistics
            RestApiId:
              Ref: SearchApi
          Type: Api
      FunctionName:
        Fn::Sub: obp-get-statistics-function-${Environment}
      Handler: get-statistics.handler
      Runtime: nodejs12.x
    Type: AWS::Serverless::Function
  GetTermsGraph:
    Properties:
      CodeUri: s3://obp-search-api-functions-iode/d01ada3c1d2d167a67fc21c30d600f8f
      Description: Queries ontologies for terms related to the given term.
      Environment:
        Variables:
          ONTOLOGY_STORE_HOST:
            Ref: OntologyStoreHost
          ONTOLOGY_STORE_PORT:
            Ref: OntologyStorePort
      Events:
        GetTermsGraph:
          Properties:
            Method: GET
            Path: /terms/graph
            RestApiId:
              Ref: SearchApi
          Type: Api
      FunctionName:
        Fn::Sub: obp-terms-graph-function-${Environment}
      Handler: terms-graph.handler
      Runtime: nodejs12.x
      Timeout: 100
    Type: AWS::Serverless::Function
  SearchApi:
    Properties:
      DefinitionBody:
        components:
          schemas:
            Document:
              properties:
                contents:
                  type: string
                title:
                  type: string
        info:
          title:
            Ref: AWS::StackName
        paths:
          /documents:
            get:
              parameters:
              - description: 'A comma separated list of keywords used to search documents.  Multiple
                  keywords will be combined as an OR query.

                  '
                in: query
                name: keywords
                required: true
                schema:
                  items:
                    type: string
                  type: array
              - description: 'This parameter supports pagination by allowing you to
                  specify the offset to start returning search results. Use in conjunction
                  with the limit parameter.

                  '
                in: query
                name: from
                required: false
                schema:
                  type: integer
              - description: 'This parameter limits the number of results returned.
                  Use in conjunction with the from parameter to support pagination.

                  '
                in: query
                name: limit
                required: false
                schema:
                  type: integer
              - default: false
                description: 'This parameter determines whether or not exact synonyms
                  - obtained from the available  ontologies - of the given keywords
                  are included in the query.

                  '
                in: query
                name: synonyms
                required: false
                schema:
                  type: boolean
              - description: 'A comma separated list of metadata field names (e.g.
                  author) which restricts the search query to only these fields. Otherwise,
                  the default fields will be used.

                  '
                in: query
                name: fields
                required: false
                schema:
                  items:
                    type: string
                  type: array
              - default: false
                description: 'This parameter - if set to true - will limit the results
                  to those that have the refereed metadata value set to "Refereed".

                  '
                in: query
                name: refereed
                required: false
                schema:
                  type: boolean
              responses:
                '200':
                  description: Returns the results of the keyword search.
                '500':
                  description: An error occurred.
              summary: Search for documents by keywords.
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchByKeywords.Arn}/invocations
          /documents/autocomplete:
            get:
              parameters:
              - description: 'The text used to fuzzy match suggested keywords.

                  '
                in: query
                name: input
                required: true
                schema:
                  type: string
              - default: false
                description: 'This parameter determines whether or not exact synonyms
                  - obtained from the available  ontologies - of the given input are
                  included in the query.

                  '
                in: query
                name: synonyms
                required: false
                schema:
                  type: boolean
              responses:
                '200':
                  description: Returns a list of suggested keywords based on the input
                    text.
                '500':
                  description: An error occurred.
              summary: Provides a list of suggested keywords based on the input text.
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchAutocomplete.Arn}/invocations
          /statistics:
            get:
              responses:
                '200':
                  description: Returns an object containing document and ontological
                    term counts.
                '500':
                  description: An error occurred.
              summary: Provides statistics including document and ontological term
                counts.
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStatistics.Arn}/invocations
          /terms/graph:
            get:
              parameters:
              - description: 'The term used as the root node when building the relational
                  graph.

                  '
                in: query
                name: term
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: Returns an object describing the relationships found
                    in the searched ontologies for the given term.
                '500':
                  description: An error occurred.
              summary: Provides a relational graph of an ontological term including
                subclasses and relationships.
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTermsGraph.Arn}/invocations
          documents/preview:
            post:
              parameters:
              - default: json
                description: 'This paramter controls the format of the results. Valid
                  values are "json" or "csv". Defaults to "json".

                  '
                in: query
                name: form
                required: false
                schema:
                  type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Document'
                description: The document body and title used in our tagging routine.
                required: true
              responses:
                '200':
                  description: List of terms that match the given document body and
                    title based on our tagging routine.
                '500':
                  description: An error occurred.
              summary: Returns the results of our ontology term tagging routine against
                the provided document body and title.
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentPreview.Arn}/invocations
        swagger: '2.0'
      StageName:
        Ref: Environment
    Type: AWS::Serverless::Api
  SearchAutocomplete:
    Properties:
      CodeUri: s3://obp-search-api-functions-iode/d01ada3c1d2d167a67fc21c30d600f8f
      Description: Returns a subset of ontology terms that complete the given keyword.
      Environment:
        Variables:
          ONTOLOGY_STORE_HOST:
            Ref: OntologyStoreHost
          ONTOLOGY_STORE_PORT:
            Ref: OntologyStorePort
      Events:
        SearchAutocomplete:
          Properties:
            Method: GET
            Path: /documents/autocomplete
            RestApiId:
              Ref: SearchApi
          Type: Api
      FunctionName:
        Fn::Sub: obp-search-autocomplete-function-${Environment}
      Handler: search-autocomplete.handler
      Runtime: nodejs12.x
      Timeout: 100
    Type: AWS::Serverless::Function
  SearchByKeywords:
    Properties:
      CodeUri: s3://obp-search-api-functions-iode/d01ada3c1d2d167a67fc21c30d600f8f
      Description: Searches the OBP index for documents matching the given keywords.
      Environment:
        Variables:
          ELASTIC_SEARCH_HOST:
            Ref: ElasticSearchHost
          ONTOLOGY_STORE_HOST:
            Ref: OntologyStoreHost
          ONTOLOGY_STORE_PORT:
            Ref: OntologyStorePort
          REGION:
            Ref: AWS::Region
      Events:
        Search:
          Properties:
            Method: GET
            Path: /documents
            RestApiId:
              Ref: SearchApi
          Type: Api
      FunctionName:
        Fn::Sub: obp-search-by-keywords-function-${Environment}
      Handler: search.handler
      Runtime: nodejs12.x
      Timeout: 300
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
